1) What is CSS?

CSS (Cascading Style Sheets) is used to style HTML by controlling layout, colors, fonts, and overall appearance. While HTML provides webpage structure, CSS makes it visually appealing.

CSS separates content from presentation, making websites more flexible and easier to maintain. It applies styles to HTML elements and supports responsive design, adapting layouts to different devices.

Its cascading nature allows styles to be inherited or overridden, and external stylesheets enable sharing styles across multiple pages.

In web development, CSS is essential for creating attractive, responsive, and user-friendly websites.

////////////////////////////////////////////

2) What Is the Basic Anatomy of a CSS Rule?

So CSS is responsible for the styles of a web page. 
All of the styles are made up of various CSS rules

Rules have two main parts:
    - a selector, and a declaration black
eg: selector {
  property: value;
}

Selector: Targets specific HTML elements (like type, class, or ID selectors).
Declaration block: Contains one or more declarations inside curly braces {}. Each declaration has a property (what to style) and a value (how to style it), separated by a colon and ending with a semicolon.

eg: p {
  color: blue;
}
This rule will target all <p> elements, by setting text blue

eg: #title, .subheading {
  color: navy;
}
With the baove u can style multiple selectors at once, by comma seperation
#title = id, and .subheading = class
note:
- All id selectors start with # 
- all class selectors starting with a . (dot)
- for elements selectors, just put the element without brackets

/////////////////////////////

3) What is meta viewport element used for?

The meta viewport element is a crucial component in responsive web design. 
Its essential in responsive web design, telling browsers how to control page dimensions and scaling on different devices, especially mobiles and tablets. It’s placed in the HTML document’s head section, typically like this:
<meta name="viewport" content="width=device-width, initial-scale=1.0">

"width=device-width" sets the page width to match the device’s screen width, enabling layouts to adapt to various screen sizes.

"initial-scale=1.0" sets the initial zoom to 100%, displaying the page without scaling.

Without this element, mobile browsers render pages as if on a desktop screen and then shrink them, causing tiny, hard-to-read text.

The element can also control zooming with attributes like "user-scalable=no", but disabling zoom is discouraged for accessibility since many users depend on zooming for readability.

Proper use of the meta viewport element ensures responsive designs display correctly across devices, improving the user experience on mobile and tablet screens.

/////////////////////////////////

4) What Are Some Default Browser Styles Applied to HTML?

When you create a webpage using HTML, browsers automatically apply default styles to ensure content is displayed in a basic, readable way. These are known as default browser styles or user-agent styles.
-> these styles can vary across browsers, so understanding them is important for creating a consistent website layout.

common default styles:
  i) Headings (<h1> to <h6>)
    - Displayed with varying font sizes and weights.
    - <h1> is typically the largest and boldest, followed by smaller headings.
    - These elements establish a hierarchy and structure.
  
  eg: <h1>Heading 1</h1>
  <h2>Heading 2</h2>
  ...
  <h6>Heading 6</h6>

  ii) Horizontal Rule (<hr>)
    - Renders as a thin horizontal line.
    - Includes spacing above and below to visually separate sections.
  
  eg: <p>Paragraph 1</p>
  <p>Paragraph 2</p>
  <hr>
  <p>Paragraph 3</p>

  iii) Blockquote (<blockquote>)
  - Browsers typically indent the text.
  - Some may also italicize it.
  - Used to quote other sources, visually distinguishing the content.

  eg: <blockquote>I think, therefore I am. (Rene Descartes)</blockquote>

  iv) 4. Anchor (<a>)
  - Styled by default as blue and underlined.
  - Makes hyperlinks easily recognizable to users.

  eg: <a href="https://freecodecamp.org/">Visit freeCodeCamp</a>

  v) 5. Lists (<ol> and <ul>)
  - Given basic indentation.
  - <ul> uses bullets; <ol> uses numbers.
  - Items are slightly indented by default.

  eg: <ol>
    <li>item 1</li>
    <li>item 2</li>
  </ol>
  <ul>
    <li>item</li>
    <li>another item</li>
  </ul>

  Each of these HTML elements comes with default spacing, font styles, and layout rules. While useful for initial readability, these styles often need to be overridden or reset using CSS to ensure consistent design across browsers.

///////////////////////////////////

5) What Are Inline, Internal, and External CSS, and When Should You Use Each One?

  i) Inline CSS
  - Applied directly within an HTML element using the style attribute.
  eg:
  <p style="color: red;">This is an inline-styled paragraph.</p>

  Use when: Quickly styling a single element or overriding other styles.
  Avoid: Overusing because it clutters HTML and makes maintenance harder

  ii) Internal CSS
  - Placed inside <style> tags within the <head> section of an HTML document.
  eg:
    <head>
    <style>
      p {
        color: blue;
      }
    </style>
  </head>
  <body>
    <p>This paragraph is styled using internal CSS.</p>
  </body>

  Use when: Styling a single page or small websites where styles don’t need to be reused.
  Limitations: Styles can’t be reused across multiple pages and mixes CSS with HTML.

  iii) External CSS
  - Written in a separate .css file and linked in the HTML with a <link> tag inside the <head>.
  eg: 
  # style.css
  p {
    color: green;
  }
  # index.html
  <head>
    <link rel="stylesheet" href="styles.css">
  </head>
  <body>
    <p>This paragraph is styled using external CSS.</p>
  </body>

  Use when: Creating large or multi-page websites to maintain consistent styles.
  Benefits: Separates style from structure, making code more maintainable and scalable.

  Overall, external CSS is recommended for most projects, especially larger ones, while inline and internal CSS have niche uses for quick or single-page styling.

//////////////


6) How do width and height work in CSS?
  - The width and height properties control the size of elements.
  - They can be set using various units like pixels (px), percentages (%), or viewport units (vw, vh).
  - By default, both width and height are auto:
    - width: auto means the element takes the full width of its parent container.
    - height: auto means the element adjusts to the height of its content.
  
  eg: Creating a div with 100px width and height and a skyblue background.
  <head>
    <style>
      .box {
        width: 100px;
        height: 100px;
        background-color: skyblue;
      }
    </style>
  </head>
  <body>
    <div class="box"></div>
  </body>

  # Minimum dimensions: min-width and min-height
    - min-width sets the minimum width an element can have.
    - min-height sets the minimum height an element can have.
  
  These properties prevent the element from shrinking below the specified size, even if the width or height values are smaller.

  eg:
  <head>
    <style>
      .box {
        width: 50px;
        min-width: 100px;
        height: 50px;
        min-height: 100px;
        background-color: lightcoral;
      }
    </style>
  </head>
  <body>
    <div class="box"></div>
  </body>

  Although width and height are 50px, the box will actually be 100px by 100px because min-width and min-height override smaller values.

  # Maximum dimensions: max-width and max-height
    - max-width limits the maximum width an element can grow to. 
    - max-height limits the maximum height an element can grow to.

  These properties restrict the size even if the specified width or height is larger.

  eg:
  <head>
    <style>
      .box {
        width: 200px;
        max-width: 150px;
        height: 200px;
        max-height: 150px;
        background-color: lightgreen;
      }
    </style>
  </head>
  <body>
    <div class="box"></div>
  </body>

  The box will be 150px by 150px despite the 200px width and height, because max-width and max-height limit its size.

7) What Are the Different Types of CSS Combinators?
  
  - CSS combinators define relationships between selectors to target elements based on their position relative to others. 
  
  i) Descendant combinator (space): selects elements nested anywhere inside an ancestor.

  eg:
    figure img {
      border: 4px solid black;
    }

  This targets all img elements inside figure elements.

  ii) Child combinator (>): selects only direct children of a specified parent.
  
  eg:
    .container > p {
      color: blue;
    }

  This targets only the p elements that are direct children of .container, not deeper nested ones.

  iii) Next-sibling combinator (+): selects the element immediately following a specified sibling.
  
  eg:
    img + figcaption {
      border: 4px solid black;
    }

  This applies a border to the figcaption immediately after an img.

  iv) Subsequent-sibling combinator (~): selects all siblings that come after a specified element (not just the immediate one).

  eg:
    h2 ~ p {
      color: green;
    }

  This styles all p elements that follow an h2 sibling, regardless of how many elements are in between.

  Using combinators allows precise and flexible styling by targeting elements based on their relationships in the HTML structure. Mastery of these enhances the control over the design and behavior of web pages.

8) What is the difference between inline and block-level elements?
  i) Block-level elements
  - Take up the full width of their container by default.
  - Always start on a new line, pushing following content down.
  - Have display: block; by default.
  - Examples include <div>, <p>, <h1>, <ul>, and <section>.
  - Used for structuring large sections of content and vertical stacking.
  
  eg:
    <p style="border: 2px solid red;">
      First paragraph
    </p>
    <p>Second paragraph</p>

  (q) How can you change the behavior of a block-level element to behave like an inline element? 
  - Apply display: inline;

  ii) Inline elements
  - Take up only as much width as needed.
  - Do not start on a new line, flowing alongside other content.
  - Have display: inline; by default.
  - Examples include <span>, <a>, and <img>.
  - Used for styling or formatting small parts of text within a line.

  eg:
    <p>This is a
      <span style="color: red; border: 2px solid green;">red</span>
      word inside a paragraph.
    </p>

  Understanding these differences helps control webpage layout and content display effectively.

9) How Does Inline-Block Work, and How Does It Differ from Inline and Block Elements?

  i) Block elements
  - Take up the full width of their container.
  - Always start on a new line.
  - You can set width and height freely.

  ii) Inline elements
  - Only take up as much space as their content needs.
  - Flow within the surrounding text without breaking lines.
  - Width and height cannot be controlled.

  iii) Inline-block elements
  - Behave like inline elements by staying in the flow and sitting side by side.
  - Unlike inline elements, you can set width and height like block elements.
  - This makes them a hybrid with the flexibility of both.

  eg:
    # html
    <div class="container">
      <span class="inline-block-element element1">Inline-Block Element 1</span>
      <span class="inline-block-element element2">Inline-Block Element 2</span>
    </div>

    # css
    .inline-block-element {
      display: inline-block;
      width: 150px;
      height: 100px;
    }

    .element1 {
      background-color: lightblue;
    }

    .element2 {
      background-color: lightgreen;
    }

  With display: inline-block, the two spans sit side by side and respect the specified width and height.

  eg: 
    .inline-block-element {
      width: 150px;
      height: 100px;
    }

    .element1 {
      background-color: lightblue;
    }

    .element2 {
      background-color: lightgreen;
    }

  If u remove display: inline-block: 
    The spans revert to inline behavior, ignoring width and height and only taking up the space needed by their content.

  So having inline-block means, it tries to stay on the same line instead of seperate lines

  (q) In what situation would an element with display: inline-block; behave differently than one with display: block;?
  - When you want the element to flow alongside text and other inline elements.

10) What Are Margins and Padding, and How Do They Work?

  # Margin = space outside an element (between elements).
  # Padding = space inside an element (between content and border).

  Both can be controlled on all four sides: top, right, bottom, left.

  eg) Margin Example (Top Margin Only):
    <p>Paragraph one</p>
    <p>Paragraph two</p>
    <p>Paragraph three</p>

    p {
      margin-top: 20px;
      border: 2px solid black;
    }
  
  Adds 20px above each paragraph, with borders showing spacing clearly.

  eg) Margin on All Four Sides:
    <span>Paragraph one</span>
    <p>Paragraph two</p>
    <span>Paragraph three</span>

    p {
      margin-top: 10px;
      margin-right: 20px;
      margin-bottom: 30px;
      margin-left: 40px;
      border: 2px solid black;
    }

  Top: 10px, Right: 20px, Bottom: 30px, Left: 40px.

  eg) Margin Shorthand Examples:

  - 1 value (all sides):
      p {
        margin: 10px;
      }

  - 2 values (top-bottom, left-right):
      p {
        margin: 10px 20px;
      }
  
  - 3 values (top, left-right, bottom):
      p {
        margin: 10px 20px 30px;
      }
  
  - 4 values (top, right, bottom, left):
      p {
        margin: 10px 20px 30px 40px;
      }

  eg) Padding Example (Four Sides):
      <span>Paragraph one</span>
      <p>Paragraph two</p>
      <span>Paragraph three</span>

      p {
        padding-top: 10px;
        padding-right: 20px;
        padding-bottom: 30px;
        padding-left: 40px;
        border: 2px solid black;
      }

  Padding is applied inside the element, between content and border.

  eg) Padding Shorthand Example:

    p {
      padding: 10px 20px 30px 40px;
      border: 2px solid black;
    }

  Top: 10px, Right: 20px, Bottom: 30px, Left: 40px.


  - Margin separates elements on the outside. 
  - Padding creates space inside an element.
  - Both can use individual side properties or shorthand notation for cleaner code.


  Remember for shorthand:
  top, right, bottom, left